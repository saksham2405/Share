/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fileshare;

import static fileshare.Send.filename;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;


/**
 *
 * @author aditya
 */
public class Recieve {
    static File myfile;
    static ServerSocket server;
    static Socket sock;
    static DataInputStream dis;
    static DataOutputStream dos;
    static BufferedInputStream bis;
    public Recieve() {
        filename=null;
        server=null;
        sock=null;
        dis=null;
        dos=null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
                

   
    public static void reciever() {
        
        try {
            sock=new Socket("localhost",3128);
            System.out.println("Server mil gaya\n");
        } catch (IOException ex) {
            System.out.println("Server na mila\n");
            Logger.getLogger(Recieve.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            bis=new BufferedInputStream(sock.getInputStream());
            dis=new DataInputStream(bis);
        } catch (IOException ex) {
            Logger.getLogger(Recieve.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            dos=new DataOutputStream(sock.getOutputStream());
        } catch (IOException ex) {
            Logger.getLogger(Recieve.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            
            boolean isdir=dis.readBoolean();
            if(!isdir)
            {
                long length=dis.readLong();
                String name=dis.readUTF();
                File newfile=new File(name);
                FileOutputStream fos=new FileOutputStream(newfile);
                byte[] data=new byte[4090];
                int len;
                while((len=dis.read(data))>0)
                {
                    fos.write(data,0,len);
                }
                fos.close();
            }
            else{
                String dir=dis.readUTF();
                String directory=System.getProperty("user.dir");
                directory=directory+"/"+dir;
                File newdir=new File(directory);
                newdir.mkdir();
                recieved(directory);
            }
             dis.close();
            dos.close();
            sock.close();
           
        } catch (IOException ex) {
            System.out.println("folder ka naam na aya");
            Logger.getLogger(Recieve.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public static void  recieved(String directory)// throws FileNotFoundException
    {
        int numfiles = 0;
        try {
            numfiles=dis.readInt();
            System.out.println("current "+directory+" "+numfiles);
        } catch (IOException ex) {
            System.out.println("Number of files didn't \n");
            Logger.getLogger(Recieve.class.getName()).log(Level.SEVERE, null, ex);
        }
        File files[]=new File[numfiles];
       for(int i=0;i<numfiles;i++)
       {
           boolean isdir = false;
            try {
                isdir=dis.readBoolean();
            } catch (IOException ex) {
                Logger.getLogger(Recieve.class.getName()).log(Level.SEVERE, null, ex);
            }
            if(!isdir)
            {
                long filesize = 0;
                  try {
                      filesize = dis.readLong();
                  } catch (IOException ex) {
                      Logger.getLogger(Recieve.class.getName()).log(Level.SEVERE, null, ex);
                  }
                String name ="FAILED";
                  try {
                      name = dis.readUTF();
                  } catch (IOException ex) {
                      System.out.println("File ka naam nhi aaya\n");
                      Logger.getLogger(Recieve.class.getName()).log(Level.SEVERE, null, ex);
                  }
                  System.out.println("Saving file to "+directory+"/"+name);
                        files[i]=new File(directory,name);
                System.out.println("Recieving file name: "+ files[i].getName());
                FileOutputStream fos = null;
                  try {
                      fos = new FileOutputStream(files[i]);
                  } catch (FileNotFoundException ex) {
                      System.out.println("File nhi bni");
                      Logger.getLogger(Recieve.class.getName()).log(Level.SEVERE, null, ex);
                  }
                BufferedOutputStream bos=new BufferedOutputStream(fos);
                  for(int j = 0; j < filesize; j++) try {
                      bos.write(dis.read());
                    } catch (IOException ex) {
                        Logger.getLogger(Recieve.class.getName()).log(Level.SEVERE, null, ex);
                    }
                  System.out.println("Recieved file "+name);
            }
            else
            {
                String dir = null;
               try {
                   dir = dis.readUTF();
               } catch (IOException ex) {
                   Logger.getLogger(Recieve.class.getName()).log(Level.SEVERE, null, ex);
               }
               System.out.println("Receiving directory "+dir);
               String newdirect=directory+"/"+dir;
               System.out.println("Directory changed "+newdirect);
                File newdir=new File(newdirect);
                newdir.mkdir();
                recieved(newdirect);
                System.out.println("Received directory "+dir);
            }
       }
    }
    
    // Variables declaration - do not modify                     
    // End of variables declaration                   
}
